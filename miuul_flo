--1. Customers isimli bir veritabanı ve verilen veri setindeki değişkenleri içerecek FLO isimli bir tablo oluşturunuz.


CREATE DATABASE Customers ;



CREATE TABLE FLO (
				master_id INT PRIMARY KEY,
				order_channel CHAR(4),
				last_order_channel VARCHAR(20),
				first_order_date DATE,
				last_order_date DATE,
				last_order_date_online DATE,
				last_order_date_offline DATE,
				order_num_total_ever_online INT,
				order_num_total_ever_offline INT,
				customer_value_total_ever_offline DECIMAL(10,2),
				customer_value_total_ever_online DECIMAL(10,2),
				interested_in_categories_12 VARCHAR(100),
				store_type CHAR (3)
);


SELECT  *
from dbo.flo_data_20K

-- 2. Kaç farklı müşterinin alışveriş yaptığını gösterecek sorguyu yazınız. 

SELECT COUNT (DISTINCT master_id) AS total_customers FROM FLO ;

--3. Toplam yapılan alışveriş sayısı ve ciroyu getirecek sorguyu yazınız.

SELECT 
  SUM(order_num_total_ever_online + order_num_total_ever_offline) AS total_order_count,
  ROUND (SUM(customer_value_total_ever_online + customer_value_total_ever_offline),2) AS total_revenue
FROM FLO;

--4. Alışveriş başına ortalama ciroyu getirecek sorguyu yazınız. 

SELECT 
  ROUND(total_revenue / total_order_count,2) AS avg_revenue_per_order
FROM (
  SELECT 
    SUM (order_num_total_ever_online + order_num_total_ever_offline) AS total_order_count,
    SUM(customer_value_total_ever_online + customer_value_total_ever_offline) AS total_revenue
    FROM FLO
) AS totals;


--5.En son alışveriş yapılan kanal (last_order_channel) üzerinden yapılan alışverişlerin toplam ciro ve alışveriş sayılarını getirecek sorguyu yazınız. 


SELECT 
	last_order_channel,
    SUM(order_num_total_ever_online + order_num_total_ever_offline) AS total_order_count,
    SUM(customer_value_total_ever_online + customer_value_total_ever_offline) AS total_revenue
  FROM FLO
GROUP BY last_order_channel;


--6. Store type kırılımında elde edilen toplam ciroyu getiren sorguyu yazınız. 

SELECT 
	store_type,
    SUM(customer_value_total_ever_online + customer_value_total_ever_offline) AS total_revenue
  FROM FLO
 GROUP BY store_type;


--7. Yıl kırılımında alışveriş sayılarını getirecek sorguyu yazınız (Yıl olarak müşterinin ilk alışveriş tarihi (first_order_date) yılını baz alınız)


SELECT 
	YEAR (first_order_date) AS order_year,
    SUM(order_num_total_ever_online + order_num_total_ever_offline) AS total_order_count
  FROM FLO
GROUP BY YEAR(first_order_date)
ORDER BY 2 DESC;

--yıla göre sıralama 

SELECT 
	YEAR (first_order_date) AS order_year,
    SUM(order_num_total_ever_online + order_num_total_ever_offline) AS total_order_count
  FROM FLO
 GROUP BY YEAR(first_order_date)
ORDER BY 1 DESC;

--8. En son alışveriş yapılan kanal kırılımında alışveriş başına ortalama ciroyu hesaplayacak sorguyu yazınız. 
  

SELECT 
  last_order_channel,
  ROUND(SUM(customer_value_total_ever_online + customer_value_total_ever_offline) / 
  SUM(order_num_total_ever_online + order_num_total_ever_offline),2) AS avg_revenue_per_order
FROM FLO
GROUP BY last_order_channel;

--9. Son 12 ayda en çok ilgi gören kategoriyi getiren sorguyu yazınız.

SELECT interested_in_categories_12 ,
	COUNT(*) cat_info
FROM FLO
GROUP BY interested_in_categories_12
ORDER BY 2 DESC;


SELECT interested_in_categories_12 ,
	COUNT(*) cat_info
FROM FLO
GROUP BY interested_in_categories_12
ORDER BY 1 DESC;


--10. En çok tercih edilen store_type bilgisini getiren sorguyu yazınız. 

SELECT TOP 1 
		store_type,
	COUNT(*) info
FROM FLO
GROUP BY store_type
ORDER BY 2 DESC;

--11. En son alışveriş yapılan kanal (last_order_channel) bazında, en çok ilgi gören kategoriyi ve bu kategoriden ne kadarlık alışveriş yapıldığını getiren sorguyu yazınız.

SELECT DISTINCT last_order_channel ,
	 (SELECT top 1 
	
	interested_in_categories_12
		FROM FLO
		WHERE last_order_channel=f.last_order_channel
		GROUP BY interested_in_categories_12
		ORDER BY SUM(order_num_total_ever_online+order_num_total_ever_offline) DESC ) AS CATEGORY,
		(SELECT top 1
		SUM(order_num_total_ever_online+order_num_total_ever_offline)
		FROM FLO
		WHERE last_order_channel=f.last_order_channel
		GROUP BY interested_in_categories_12
		ORDER BY SUM(order_num_total_ever_online+order_num_total_ever_offline) DESC)  AS SHOPPING_NUMBER
FROM FLO F;

--ORDER BY SHOPPING_NUMBER DESC;

--12. En çok alışveriş yapan kişinin ID’ sini getiren sorguyu yazınız. 


SELECT top 1 master_id 
FROM FLO
group by master_id
ORDER BY SUM(order_num_total_ever_online+order_num_total_ever_offline) DESC 

--13. En çok alışveriş yapan kişinin alışveriş başına ortalama cirosunu ve alışveriş yapma gün ortalamasını (alışveriş sıklığını) getiren sorguyu yazınız. 


SELECT *,
  ROUND((D.TOTAL_REVENUE / D.TOTAL_ORDER_COUNT), 2) AS AVG_REVENUE_PER_ORDER
FROM (
  SELECT TOP 1
    master_id,
    SUM(customer_value_total_ever_online + customer_value_total_ever_offline) AS TOTAL_REVENUE,
    SUM(order_num_total_ever_online + order_num_total_ever_offline) AS TOTAL_ORDER_COUNT
  FROM FLO
  GROUP BY master_id
  ORDER BY TOTAL_REVENUE DESC
) D;


--14. En çok alışveriş yapan (ciro bazında) ilk 100 kişinin alışveriş yapma gün ortalamasını (alışveriş sıklığını) getiren sorguyu yazınız.

SELECT 
  D.master_id, D.total_revenue, D.total_order_count,
  ROUND((D.total_revenue / D.total_order_count), 2) AS avg_revenue_per_order,
  DATEDIFF(DAY, D.first_order_date, D.last_order_date) AS days_between_first_and_last_order,
  ROUND(DATEDIFF(DAY, D.first_order_date, D.last_order_date) * 1.0 / D.total_order_count,1) AS avg_days_per_order

FROM (
  SELECT TOP 100
    master_id,
    first_order_date,
    last_order_date,
    SUM(customer_value_total_ever_offline + customer_value_total_ever_online) AS total_revenue,
    SUM(order_num_total_ever_offline + order_num_total_ever_online) AS total_order_count
  FROM FLO
  GROUP BY master_id, first_order_date, last_order_date
  ORDER BY SUM(customer_value_total_ever_offline + customer_value_total_ever_online) DESC
) D;



-- 15. En son alışveriş yapılan kanal (last_order_channel) kırılımında en çok alışveriş yapan müşteriyi getiren sorguyu yazınız. 


--SELECT top 1 master_id , SUM(order_num_total_ever_online+order_num_total_ever_offline) AS total_order FROM FLO GROUP BY last_order_channel, master_id ORDER BY total_order desc


SELECT 
    f.last_order_channel,
    f.master_id,
    f.total_order_count
FROM (
    SELECT 
        last_order_channel,
        master_id,
        SUM(order_num_total_ever_online + order_num_total_ever_offline) AS total_order_count,
        RANK() OVER (
            PARTITION BY last_order_channel 
            ORDER BY SUM(order_num_total_ever_online + order_num_total_ever_offline) DESC
        ) AS rn
    FROM FLO
    GROUP BY last_order_channel, master_id
) f
WHERE f.rn = 1;

SELECT DISTINCT last_order_channel,
    (SELECT top 1
    master_id
    FROM FLO WHERE last_order_channel=F.last_order_channel
    GROUP BY master_id
    ORDER BY SUM (customer_value_total_ever_offline+customer_value_total_ever_online) desc)
    Most_shoppers,
    (SELECT top 1
        SUM(customer_value_total_ever_offline+customer_value_total_ever_online)
        FROM flo WHERE last_order_channel=f.last_order_channel
        GROUP BY master_id
        ORDER BY SUM(customer_value_total_ever_offline+customer_value_total_ever_online) desc) REVENUE
        FROM FLO F;


--16. En son alışveriş yapan kişinin ID’ sini getiren sorguyu yazınız. (Max son tarihte birden fazla alışveriş yapan ID bulunmakta. Bunları da getiriniz.) 


SELECT  master_id, last_order_date from flo where last_order_date = (SELECT MAX (last_order_date) FROM FLO)
